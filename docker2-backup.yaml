services:
  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
    - zookeeper
    ports:
    - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
    - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
    - kafka
    - zookeeper

  # Spark
  spark-master:
    image: bitnami/spark:latest
    ports:
    - "8090:8080"
    - "7077:7077"
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no

  spark-worker:
    image: bitnami/spark:latest
    depends_on:
    - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1

  # Airflow services
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_postgres_password}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    ports:
    - "5432:5432"
    volumes:
    - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airflow}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.10.3
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-admin}
      _AIRFLOW_WWW_USER_EMAIL: admin@example.com
    command: bash -c " airflow db check && \ airflow db init && \ airflow users list || \ airflow users create \ --username $${_AIRFLOW_WWW_USER_USERNAME} \ --password $${_AIRFLOW_WWW_USER_PASSWORD} \ --firstname Admin \ --lastname User \ --role Admin \ --email $${_AIRFLOW_WWW_USER_EMAIL} "
    healthcheck:
      test: [ "CMD", "airflow", "db", "check" ]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.10.3
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    ports:
    - "8091:8080"
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__SECRET_KEY: 'your_secret_key_here'
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY:-}
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    command: >
      bash -c "
        pip install apache-airflow-providers-elasticsearch apache-airflow-providers-apache-kafka &&
        airflow db check &&
        airflow webserver
      "
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    image: apache/airflow:2.10.3
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5

  # Modified Elasticsearch & Kibana configuration
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    ports:
    - "9200:9200"
    environment:
    - discovery.type=single-node
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    - xpack.security.enabled=false
    - ELASTIC_PASSWORD=changeme

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    ports:
    - "5601:5601"
    environment:
    - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
    - elasticsearch

  # Add API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
    - "3000:3000"
    volumes:
    - ./src/api:/usr/src/app
    - /usr/src/app/node_modules
    environment:
    - NODE_ENV=development
    depends_on:
    - kafka
    command: sh -c "npm install && npm start"

  # Add pgAdmin
  pgadmin:
    platform: linux/amd64
    image: dpage/pgadmin4:7.8
    user: "5050"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
    - "5050:80"
    volumes:
    - pgadmin-data:/var/lib/pgadmin
    depends_on:
    - postgres
    restart: always

  adminer:
    image: adminer:latest
    platform: linux/amd64
    ports:
    - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
    - postgres

  # Redis for caching
  redis:
    image: redis:latest
    ports:
    - "6379:6379"
    volumes:
    - redis-data:/data
    command: redis-server --appendonly yes

    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
    - "9090:9090"
    volumes:
    - ./kubernetes/prometheus-config.yaml:/etc/prometheus/prometheus.yml:ro
    - prometheus-data:/prometheus
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
    - kafka
    - elasticsearch
    - redis-exporter

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
    - "3001:3000"
    environment:
    - GF_SECURITY_ADMIN_USER=admin
    - GF_SECURITY_ADMIN_PASSWORD=admin
    - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
    - grafana-data:/var/lib/grafana
    depends_on:
    - prometheus

  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
    - "9121:9121"
    environment:
    - REDIS_ADDR=redis://redis:6379
    depends_on:
    - redis

  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
    - "8083:8081"
    environment:
    - REDIS_HOSTS=local:redis:6379
    depends_on:
    - redis

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:
  prometheus-data:
  grafana-data:
